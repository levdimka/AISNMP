@{
    ViewBag.Title = "Інформація";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>

<p>Дану автоматизовану медичну інформаційну систему виконано на ASP.NET. ASP.NET — технологія створення вебзастосунків і вебсервісів від компанії Майкрософт. Вона є складовою частиною платформи Microsoft.NET і розвитком старішої технології Microsoft ASP. На цей час останньою версією цієї технології є ASP.NET MVC </p>
<p>ASP.NET зовні багато в чому зберігає схожість із старішою технологією ASP, що дає змогу розробникам відносно легко перейти на ASP.NET. У той же час внутрішній устрій ASP.NET істотно відрізняється від ASP, оскільки вона заснована на платформі. NET і, отже, використовує всі нові можливості, що надаються цією платформою.</p>
<h2>Історія ASP.NET</h2>
<p>
    Після випуску сервера Internet Information Services 4.0 в 1997 році, компанія Microsoft почала досліджувати можливість нової моделі вебзастосунків, яка задовольнить скарги на ASP, особливо пов'язані з відділенням оформлення від змісту, і яка дасть змогу писати «чистий» код. Робота з розробки такої моделі була доручена Марку Андерсу, менеджеру команди IIS, і Скотту Гутрі, що прийшов на роботу в Microsoft в 1997. Андерс і Гутрі розробили початковий проект протягом двох місяців, і Гутрі написав код первісного прототипу під час різдвяних канікул 1997 року. Початковий проект називався «XSP»; Гутрі пояснив в інтерв'ю 2007 року що, «завжди запитують, що означає буква X. У той час вона нічого не значила. XML починається з неї; XSLT починається з неї. Все кльове починається з X, тому ми його так і назвали.» Прототип XSP був написаний на Java, але скоро було вирішено побудувати нову платформу на основі Common Language Runtime (CLR), бо на платформу Java у компанії Microsoft закінчувалась ліцензія. Гутрі описав це рішення як «величезний ризик», тому що успіх нової розробки був пов'язаний з успіхом CLR, яка, як і XSP, перебувала на ранній стадії розробки.
</p>
<h2>Характеристики ASP.NET</h2>
<p>Вебсторінки ASP.NET, офіційно відомі як вебформи, є основними елементами для розробки додатків в ASP.NET. Є дві основні методології вебформ — формат вебдодатків та формат вебсайту[4]. Вебдодатки потрібно скласти перед розгортанням, тоді як структури вебсайтів дають змогу користувачеві копіювати файли безпосередньо на сервер без попередньої компіляції. Вебформи містяться в файлах з розширенням «.aspx»; ці файли зазвичай містять статичну (X) HTML розмітку. Розмітка компонентів може містити вебелементи керування на стороні сервера та елементи керування на стороні користувача, які були визначені на програмному каркасі вебсторінки. Наприклад, компонент текстової скриньки (textbox) може бути визначений на сторінці як <asp: textbox id='myid' runat='server'>, перетворюючись у поле вводу html. Крім того, динамічний код, який працює на сервері, може бути розміщений на сторінці в блоці <% - динамічний код -%>, подібно до інших технологій веброзробки, таких як PHP, JSP та ASP. З виходом ASP.NET Framework 2.0, Microsoft представила нову модель, що дає змогу використовувати статичний текст на сторінці .aspx, при цьому динамічний код залишається у файлі .aspx.vb, .aspx.cs або .aspx.fs (залежно від того, яка мова програмування використовується). </p>
<h2>Код поза моделлю</h2>
<p>Корпорація Майкрософт рекомендує використовувати в динамічному коді програми code-behind model, яка розміщує цей код у окремому файлі або в спеціально позначеному тегу. Файли коду, як правило, мають імена типу «MyPage.aspx.cs» або «MyPage.aspx.vb», а файл сторінки — MyPage.aspx (таке ж ім'я, як і у файлу сторінки (ASPX), але з розширенням, що визначає сторінку мови). Ця практика використовується у Visual Studio та інших IDE. Також, у форматі вебдодатків, pagename.aspx.cs є частковим класом, який пов'язаний з файлом pagename.designer.cs. Файл дизайнера — це файл, який автоматично створюється з ASPX-сторінки, і дає змогу розробнику посилатись на компоненти сторінки ASPX зі сторінки CS без необхідності їх оголошувати вручну, як це було в попередніх версіях ASP.NET. Використовуючи цей стиль програмування, розробник пише код, що відповідає на різні події, такі як завантаження сторінки або натискання елемента керування, а не лише на процедурний перегляд документа.</p>
<p>Code-behind model ASP.NET відрізняється від класичного ASP, оскільки він заохочує розробників створювати додатки, відокремлюючи презентацію та зміст. Теоретично, це дасть змогу вебдизайнерам, наприклад, зосередити більше уваги на розмітці дизайну, звертаючи менше уваги на порушення програмного коду, який його запускає. Це схоже на відокремлення контролера від представлення в рамках model–view–controller (MVC).</p>
<h2>Спеціальні елементи керування</h2>
<p>Програмісти також можуть створювати спеціальні елементи керування для додатків ASP.NET. На відміну від користувацьких елементів керування, ці елементи керування не мають файлу розмітки ASCX. Їхні коди компілюються в файл динамічної бібліотеки посилань (DLL). Такі елементи керування можуть використовуватися в кількох вебдодатках та проектах Visual Studio.</p>
<h2>Принципи ASP.NET</h2>
<p>Хоча ASP.NET бере свою назву від старої технології Microsoft ASP, вона значно від неї відрізняється. Microsoft повністю перебудувала ASP.NET, ґрунтуючись на Common Language Runtime (CLR), який є основою всіх застосунків Microsoft .NET. Розробники можуть писати код для ASP.NET, використовуючи практично будь-які мови програмування, що входять у комплект .NET Framework (C#, Visual Basic.NET, і JScript.NET). ASP.NET має перевагу у швидкості в порівнянні зі скриптовими технологіями, тому що при першому зверненні код компілюється і поміщається в спеціальний кеш, і згодом тільки виконується, не вимагаючи витрат часу на синтаксичний розбір , оптимізацію, і т. д.</p>
<h2>Техніка рендерингу</h2>
<p>.NET використовує технологію рендерингу «відвіданих композитів» («visited composited»). Під час компіляції файл шаблону (.aspx) складається в код ініціалізації, який створює дерево керування (композит), що представляє вихідний шаблон. Літерний текст переходить в екземпляри класу Literal control, а елементи керування сервером в екземпляри специфічного класу керування. Код ініціалізації поєднується з кодом, написаним користувачем (зазвичай шляхом збірки декількох часткових класів), і переходить до специфічного класу сторінки.</p>
<p>Фактичні запити на сторінку обробляються у кілька кроків. По-перше, під час ініціалізації створюється екземпляр класу сторінки та виконується код ініціалізації. Це створює початкове дерево керування, яке маніпулюється методами сторінки в наступних кроках. Оскільки кожен вузол у дереві є елементом керування, представлений як екземпляр класу, код може змінювати структуру дерева, а також маніпулювати властивостями / методами окремих вузлів. Нарешті, під час етапу візуалізації користувач (відвідувач) має відвідати кожен вузол у дереві, вимагаючи, щоб кожен вузол сам використовував методи відвідувача. Вихідний HTML надсилається клієнту.</p>
<p>Після того, як запит було оброблено, екземпляр класу сторінки відкидається, а разом з ним і все дерево керування. Це викликає труднощі у програмістів-початківців ASP.NET, які звертаються до членів екземпляру класу, які відкидаються з кожним циклом запиту / відповіді сторінки.</p>